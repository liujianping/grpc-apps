//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: hello.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Helloworld_GreeterSayHelloCall: ClientCallUnary {}

fileprivate final class Helloworld_GreeterSayHelloCallBase: ClientCallUnaryBase<Helloworld_HelloRequest, Helloworld_HelloReply>, Helloworld_GreeterSayHelloCall {
  override class var method: String { return "/helloworld.Greeter/SayHello" }
}


/// Instantiate Helloworld_GreeterServiceClient, then call methods of this protocol to make API calls.
internal protocol Helloworld_GreeterService: ServiceClient {
  /// Synchronous. Unary.
  func sayHello(_ request: Helloworld_HelloRequest) throws -> Helloworld_HelloReply
  /// Asynchronous. Unary.
  func sayHello(_ request: Helloworld_HelloRequest, completion: @escaping (Helloworld_HelloReply?, CallResult) -> Void) throws -> Helloworld_GreeterSayHelloCall

}

internal final class Helloworld_GreeterServiceClient: ServiceClientBase, Helloworld_GreeterService {
  /// Synchronous. Unary.
  internal func sayHello(_ request: Helloworld_HelloRequest) throws -> Helloworld_HelloReply {
    return try Helloworld_GreeterSayHelloCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func sayHello(_ request: Helloworld_HelloRequest, completion: @escaping (Helloworld_HelloReply?, CallResult) -> Void) throws -> Helloworld_GreeterSayHelloCall {
    return try Helloworld_GreeterSayHelloCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

